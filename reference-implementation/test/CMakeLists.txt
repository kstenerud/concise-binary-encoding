# Download and unpack googletest at configure time
configure_file(${CMAKE_SOURCE_DIR}/cmake/GoogleTest-CMakeLists.txt.in ${CMAKE_BINARY_DIR}/googletest-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "CMake step for googletest failed: ${result}")
endif()
execute_process(COMMAND ${CMAKE_COMMAND} --build .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "Build step for googletest failed: ${result}")
endif()

# Add googletest directly to our build. This defines
# the gtest and gtest_main targets.
add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
                 ${CMAKE_BINARY_DIR}/googletest-build
                 EXCLUDE_FROM_ALL)

# Now simply link against gtest or gtest_main as needed. Eg
add_executable(cbe_test
                   src/main.cpp
                   src/support.cpp
                   src/bool.cpp
                   src/int8.cpp
                   src/int16.cpp
                   src/int32.cpp
                   src/int64.cpp
                   src/int128.cpp
                   src/float32.cpp
                   src/float64.cpp
                   src/float128.cpp
                   src/date.cpp
                   src/string.cpp
                   src/bytes.cpp
                   src/list.cpp
                   src/map.cpp
               )

target_compile_features(cbe_test PRIVATE cxx_auto_type)
target_link_libraries(cbe_test gtest_main CBE::cbe)

# Gain access to internal headers
include_directories(${CMAKE_SOURCE_DIR}/src)

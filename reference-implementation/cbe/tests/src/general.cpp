#include "helpers/test_helpers.h"

// #define KSLogger_LocalLevel DEBUG
#include "kslogger.h"

using namespace enc;

#define TEST_ENCODE_DECODE_SHRINKING_TIME(YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, USEC, ...) \
TEST(Time, time_ ## YEAR ## _ ## MONTH ## _ ## DAY ## _ ## HOUR ## _ ## MINUTE ## _ ## SECOND ## _ ## USEC) \
{ \
	cbe_test::expect_encode_decode_with_shrinking_buffer_size(0, \
		smtime(YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, USEC), \
		 __VA_ARGS__); \
}


#define TEST_ENCODE_DECODE_SHRINKING_INT128(NAME, HIGH, LOW, ...) \
TEST_ENCODE_DECODE_SHRINKING(Int128, NAME, i128(HIGH, LOW),  __VA_ARGS__) \

#define TEST_ENCODE_DECODE_SHRINKING_INT128_SIMPLE(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Int128, NAME, i128(VALUE),  __VA_ARGS__) \

#define TEST_ENCODE_DECODE_SHRINKING_INT64(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Int64, NAME, i64(VALUE),  __VA_ARGS__) \
TEST_ENCODE_DECODE_SHRINKING_INT128_SIMPLE(NAME, VALUE, __VA_ARGS__)

#define TEST_ENCODE_DECODE_SHRINKING_INT32(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Int32,NAME, i32(VALUE),  __VA_ARGS__) \
TEST_ENCODE_DECODE_SHRINKING_INT64(NAME, VALUE, __VA_ARGS__)

#define TEST_ENCODE_DECODE_SHRINKING_INT16(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Int16,NAME, i16(VALUE),  __VA_ARGS__) \
TEST_ENCODE_DECODE_SHRINKING_INT32(NAME, VALUE, __VA_ARGS__)

#define TEST_ENCODE_DECODE_SHRINKING_INT8(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Int8, NAME, i8(VALUE),   __VA_ARGS__) \
TEST_ENCODE_DECODE_SHRINKING_INT16(NAME, VALUE, __VA_ARGS__)


#define TEST_ENCODE_DECODE_SHRINKING_FLOAT128(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Float128, NAME, f128(VALUE),   __VA_ARGS__)

#define TEST_ENCODE_DECODE_SHRINKING_FLOAT64(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Float64, NAME, f64(VALUE),   __VA_ARGS__) \
TEST_ENCODE_DECODE_SHRINKING_FLOAT128(NAME, VALUE, __VA_ARGS__)

#define TEST_ENCODE_DECODE_SHRINKING_FLOAT32(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Float32, NAME, f32(VALUE),   __VA_ARGS__) \
TEST_ENCODE_DECODE_SHRINKING_FLOAT64(NAME, VALUE, __VA_ARGS__)


#define TEST_ENCODE_DECODE_SHRINKING_DECIMAL128(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Decimal128, NAME, d128(VALUE),  __VA_ARGS__) \

#define TEST_ENCODE_DECODE_SHRINKING_DECIMAL64(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Decimal64, NAME, d64(VALUE),  __VA_ARGS__) \
TEST_ENCODE_DECODE_SHRINKING_DECIMAL128(NAME, VALUE, __VA_ARGS__)

#define TEST_ENCODE_DECODE_SHRINKING_DECIMAL32(NAME, VALUE, ...) \
TEST_ENCODE_DECODE_SHRINKING(Decimal32, NAME, d32(VALUE),  __VA_ARGS__) \
TEST_ENCODE_DECODE_SHRINKING_DECIMAL64(NAME, VALUE, __VA_ARGS__)


// ==================================================================

TEST_ENCODE_DECODE_SHRINKING(Bool, false, bl(false), {0x7a})
TEST_ENCODE_DECODE_SHRINKING(Bool, true,  bl(true), {0x79})

TEST_ENCODE_DECODE_SHRINKING_INT8(_0,                                       0, {0x00})
TEST_ENCODE_DECODE_SHRINKING_INT8(_1,                                       1, {0x01})
TEST_ENCODE_DECODE_SHRINKING_INT8(_109,                                   109, {0x6d})
TEST_ENCODE_DECODE_SHRINKING_INT8(_n1,                                     -1, {0xff})
TEST_ENCODE_DECODE_SHRINKING_INT8(_n110,                                 -109, {0x93})
TEST_ENCODE_DECODE_SHRINKING_INT8(_110,                                   110, {0x6e, 0x6e, 0x00})
TEST_ENCODE_DECODE_SHRINKING_INT8(_n111,                                 -110, {0x6e, 0x92, 0xff})
TEST_ENCODE_DECODE_SHRINKING_INT8(_7f,                                   0x7f, {0x6e, 0x7f, 0x00})
TEST_ENCODE_DECODE_SHRINKING_INT8(_n80,                                 -0x80, {0x6e, 0x80, 0xff})

TEST_ENCODE_DECODE_SHRINKING_INT16(_7fff,                              0x7fff, {0x6e, 0xff, 0x7f})
TEST_ENCODE_DECODE_SHRINKING_INT16(_n8000,                            -0x8000, {0x6e, 0x00, 0x80})

TEST_ENCODE_DECODE_SHRINKING_INT32(_8000,                              0x8000, {0x6f, 0x00, 0x80, 0x00, 0x00})
TEST_ENCODE_DECODE_SHRINKING_INT32(_n8001,                            -0x8001, {0x6f, 0xff, 0x7f, 0xff, 0xff})
TEST_ENCODE_DECODE_SHRINKING_INT32(_7fffffff,                      0x7fffffff, {0x6f, 0xff, 0xff, 0xff, 0x7f})
TEST_ENCODE_DECODE_SHRINKING_INT32(_n80000000,                  -0x7fffffff-1, {0x6f, 0x00, 0x00, 0x00, 0x80})

TEST_ENCODE_DECODE_SHRINKING_INT64(_80000000,                     0x80000000L, {0x70, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00})
TEST_ENCODE_DECODE_SHRINKING_INT64(_n80000001,                   -0x80000001L, {0x70, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff})
TEST_ENCODE_DECODE_SHRINKING_INT64(_7fffffffffffffff,     0x7fffffffffffffffL, {0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f})
TEST_ENCODE_DECODE_SHRINKING_INT64(_n8000000000000000, -0x7fffffffffffffffL-1, {0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80})

TEST_ENCODE_DECODE_SHRINKING_INT128(_10000000000000000,                  0x0000000000000001L, 0x0000000000000000L, {0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
TEST_ENCODE_DECODE_SHRINKING_INT128(_n10000000000000000,                -0x0000000000000001L, 0x0000000000000000L, {0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff})
TEST_ENCODE_DECODE_SHRINKING_INT128(_7fffffffffffffffffffffffffffffff,   0x7fffffffffffffffL, 0xffffffffffffffffL, {0x71, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f})
TEST_ENCODE_DECODE_SHRINKING_INT128(_n80000000000000000000000000000000, -0x8000000000000000L, 0x0000000000000000L, {0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80})

TEST_ENCODE_DECODE_SHRINKING_FLOAT32(_0_0,                0.0, {0x72, 0x00, 0x00, 0x00, 0x00})
TEST_ENCODE_DECODE_SHRINKING_FLOAT32(n967234_125, -967234.125, {0x72, 0x22, 0x24, 0x6c, 0xc9})

TEST_ENCODE_DECODE_SHRINKING_FLOAT64(_1_0123,                1.0123, {0x73, 0x51, 0xda, 0x1b, 0x7c, 0x61, 0x32, 0xf0, 0x3f})

TEST_ENCODE_DECODE_SHRINKING_FLOAT128(_1_01234,             1.01234l, {0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x7e, 0xc1, 0x6e, 0xd8, 0xb6, 0x28, 0x03, 0xff, 0x3f})

TEST_ENCODE_DECODE_SHRINKING_DECIMAL32(_0,   0.0df, {0x75, 0x00, 0x00, 0x00, 0x32})
TEST_ENCODE_DECODE_SHRINKING_DECIMAL32(_0_5, 0.5df, {0x75, 0x05, 0x00, 0x00, 0x32})
TEST_ENCODE_DECODE_SHRINKING_DECIMAL32(_0_1, 0.1df, {0x75, 0x01, 0x00, 0x00, 0x32})

TEST_ENCODE_DECODE_SHRINKING(Decimal64, _1000000_000001, d64(1000000.000001dd), {0x76, 0x01, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x31})

TEST_ENCODE_DECODE_SHRINKING(Decimal128, _1000000000000_000000000001, d128(1000000000000.000000000001dl), {0x77, 0x01, 0x00, 0x00, 0xa1, 0xed, 0xcc, 0xce, 0x1b, 0xc2, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x28, 0x30})

TEST_ENCODE_DECODE_SHRINKING(Empty, nil, nil(), {0x7e})

TEST_ENCODE(Padding, pad_1, 10, pad(1), {0x7f})
TEST_ENCODE(Padding, pad_2, 10, pad(2), {0x7f, 0x7f})

TEST_ENCODE_DECODE_SHRINKING(Time, zero, smtime(0), {0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
TEST_ENCODE_DECODE_SHRINKING_TIME(1955, 11,  5,  8, 21,  0,      0, {0x78, 0x00, 0x00, 0x00, 0x54, 0xa8, 0xe6, 0xe8, 0x01})
TEST_ENCODE_DECODE_SHRINKING_TIME(2015, 10, 21, 14, 28,  9, 714000, {0x78, 0x10, 0xe5, 0x9a, 0x70, 0xce, 0xe4, 0xf7, 0x01})
TEST_ENCODE_DECODE_SHRINKING_TIME(1985, 10, 26,  8, 22, 16, 900142, {0x78, 0x2e, 0xbc, 0x0d, 0x59, 0x68, 0x65, 0xf0, 0x01})

TEST_STOP_IN_CALLBACK(SIC, nil, nil())
TEST_STOP_IN_CALLBACK(SIC, bool, bl(false))
TEST_STOP_IN_CALLBACK(SIC, int8, i8(1))
TEST_STOP_IN_CALLBACK(SIC, int16, i16(1))
TEST_STOP_IN_CALLBACK(SIC, int32, i32(1))
TEST_STOP_IN_CALLBACK(SIC, int64, i64(1))
TEST_STOP_IN_CALLBACK(SIC, int128, i128(0, 1))
TEST_STOP_IN_CALLBACK(SIC, float32, f32(1))
TEST_STOP_IN_CALLBACK(SIC, float64, f64(1))
TEST_STOP_IN_CALLBACK(SIC, float128, f128(1))
TEST_STOP_IN_CALLBACK(SIC, decimal32, d32(1))
TEST_STOP_IN_CALLBACK(SIC, decimal64, d64(1))
TEST_STOP_IN_CALLBACK(SIC, decimal128, d128(1))
TEST_STOP_IN_CALLBACK(SIC, smalltime, smtime(1))
TEST_STOP_IN_CALLBACK(SIC, list, list()->end())
TEST_STOP_IN_CALLBACK(SIC, map, map()->end())
TEST_STOP_IN_CALLBACK(SIC, string, str("test"))
TEST_STOP_IN_CALLBACK(SIC, binary, bin(std::vector<uint8_t>()))

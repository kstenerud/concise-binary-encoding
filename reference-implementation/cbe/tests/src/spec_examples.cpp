#include "helpers/test_helpers.h"

// #define KSLogger_LocalLevel DEBUG
#include "kslogger.h"

using namespace enc;


// Boolean

TEST_ENCODE_DECODE_DATA(Spec_Boolean, false, 99, 9, bl(false), {0x7c})
TEST_ENCODE_DECODE_DATA(Spec_Boolean, true,  99, 9, bl(true),  {0x7d})


// Integer

TEST_ENCODE_DECODE_DATA(Spec_Integer, p96,            99, 9, ui(96),             {0x60})
TEST_ENCODE_DECODE_DATA(Spec_Integer, p0,             99, 9, ui(0),              {0x00})
TEST_ENCODE_DECODE_DATA(Spec_Integer, n54,            99, 9, si(-54),            {0xca})
TEST_ENCODE_DECODE_DATA(Spec_Integer, p127,           99, 9, ui(127),            {0x6b, 0x7f})
TEST_ENCODE_DECODE_DATA(Spec_Integer, pff,            99, 9, ui(0xff),           {0x6b, 0xff})
TEST_ENCODE_DECODE_DATA(Spec_Integer, nff,            99, 9, si(-0xff),          {0x70, 0xff})
TEST_ENCODE_DECODE_DATA(Spec_Integer, p1000000,       99, 9, ui(1000000),        {0x6d, 0x40, 0x42, 0x0f, 0x00})
TEST_ENCODE_DECODE_DATA(Spec_Integer, n1000000000000, 99, 9, si(-1000000000000), {0x73, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00})


// Binary Floating Point

TEST_ENCODE_DECODE_DATA(Spec_BinaryFloat, p12_5,   99, 9, flt(12.5),   {0x75, 0x00, 0x00, 0x48, 0x41})
TEST_ENCODE_DECODE_DATA(Spec_BinaryFloat, p1281_2, 99, 9, flt(1281.2), {0x76, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0x04, 0x94, 0x40})


// Decinal Floating Point

TEST_ENCODE_DECODE_DATA(Spec_DecimalFloat, n7_5,    99, 9, dec(-7.5df),   {0x78, 0x4b, 0x00, 0x00, 0xb2})
TEST_ENCODE_DECODE_DATA(Spec_DecimalFloat, p1281_2, 99, 9, dec(1281.2df), {0x78, 0x0c, 0x32, 0x00, 0x32})


// Time

TEST_ENCODE_DECODE_DATA(Spec_Time, time, 99, 9, time(1985, 10, 26, 8, 22, 16, 900142),
    {0x7b, 0x2e, 0xbc, 0x0d, 0x59, 0x48, 0x6b, 0xf0, 0x01})


// Binary Array

TEST_ENCODE_DECODE_DATA(Spec_Binary, binary, 99, 9, bin({0x01, 0x02, 0x03, 0x04, 0x05}),
    {0x91, 0x14, 0x01, 0x02, 0x03, 0x04, 0x05})


// String

TEST_ENCODE_DECODE_DATA(Spec_String, string1, 99, 9, str("Main Street"),
    {0x8b, 0x4d, 0x61, 0x69, 0x6e, 0x20, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74})
TEST_ENCODE_DECODE_DATA(Spec_String, string2, 99, 9, str("Rödelstraße"),
    {0x8d, 0x52, 0xc3, 0xb6, 0x64, 0x65, 0x6c, 0x73, 0x74, 0x72, 0x61, 0xc3, 0x9f, 0x65})
TEST_ENCODE_DECODE_DATA(Spec_String, string3, 99, 9, str("覚王山　日泰寺"),
    {0x90, 0x54, 0xe8, 0xa6, 0x9a, 0xe7, 0x8e, 0x8b, 0xe5, 0xb1, 0xb1, 0xe3, 0x80, 0x80,
     0xe6, 0x97, 0xa5, 0xe6, 0xb3, 0xb0, 0xe5, 0xaf, 0xba})


// Comment

TEST_ENCODE_DECODE_DATA(Spec_comment, comment, 99, 9,
    cmt("Bug #95512: System fails to start on arm64 unless B latch is set"),
    {0x92, 0x01, 0x01, 0x42, 0x75, 0x67, 0x20, 0x23, 0x39, 0x35, 0x35, 0x31, 0x32, 0x3a,
     0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x20,
     0x74, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x72,
     0x6d, 0x36, 0x34, 0x20, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x42, 0x20, 0x6c,
     0x61, 0x74, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74})


// List

TEST_ENCODE_DECODE_DATA(Spec_List, values_1_and_5000, 99, 9, list()->ui(1)->ui(5000)->end(),
    {0x93, 0x01, 0x6c, 0x88, 0x13, 0x95})


// Map

TEST_ENCODE_DECODE_DATA(Spec_Map, a_1_b_2, 99, 9, map()->str("a")->ui(1)->str("b")->ui(2)->end(),
    {0x94, 0x81, 0x61, 0x01, 0x81, 0x62, 0x02, 0x95})


// Nil

TEST_ENCODE_DECODE_DATA(Spec_Nil, nil, 99, 9, nil(), {0x7e})


// Padding

TEST_ENCODE_DATA(Spec_Padding, padding1, 99, 9, pad(3)->ui(0x8f000000),
    {0x7f, 0x7f, 0x7f, 0x6d, 0x00, 0x00, 0x00, 0x8f})
